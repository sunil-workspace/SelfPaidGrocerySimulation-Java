package com.selfpaidgrocerysystemservices.service.pdf;

import java.io.FileOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.decimal4j.util.DoubleRounder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.selfpaidgrocerysystemservices.controller.SelfCheckoutController;
import com.selfpaidgrocerysystemservices.dto.ItemSelected;
import com.selfpaidgrocerysystemservices.service.constants.SelfpaidConstants;

/**
 * This is to create a PDF file.
 */
@Component
public class PDFCreator {
	
	private static Logger logger = LoggerFactory.getLogger(PDFCreator.class);

	/*private final static String[] HEADER_ARRAY = {"S.No.", "CompanyName", "Income", "Year"};
	public final static Font SMALL_BOLD = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD);
	public final static Font NORMAL_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);

	public static void addMetaData(Document document, String sqlXMLFileName) {
		document.addTitle("Sample Report");
		document.addSubject("Using iText");
		document.addAuthor("Arun");
	}

	public static Document addContent(Document document, List<Item> dataObjList) throws DocumentException {
		document.open();
		Paragraph paragraph = new Paragraph();
		paragraph.setFont(NORMAL_FONT);
		createReportTable(paragraph, dataObjList);
		document.add(paragraph);
		return document;
	}

	private static void createReportTable(Paragraph paragraph, List<Item> itemList) throws BadElementException {
		PdfPTable table = new PdfPTable(4);
		table.setWidthPercentage(100);
		paragraph.add(new Chunk("Report Table :- ", SMALL_BOLD));
		if(null == itemList){
			paragraph.add(new Chunk("No data to display."));
			return;
		}
		addHeaderInTable(HEADER_ARRAY, table);
		int count = 1;
		for(Item item : itemList){
			addToTable(table, String.valueOf(count)+".");
			addToTable(table, item.getName());
			addToTable(table, String.valueOf(item.getPrice()));
			addToTable(table, String.valueOf(item.getWeight()));
			count++;
		}
		paragraph.add(table);
	}


	public static void addTitlePage(Document document, String title) throws DocumentException {
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 3);
		preface.add(new Phrase("Test Report: ", NORMAL_FONT));
		preface.add(new Phrase(title, PDFCreator.NORMAL_FONT));
		addEmptyLine(preface, 1);
		preface.add(new Phrase("Date: ", PDFCreator.SMALL_BOLD));
		preface.add(new Phrase(new Date().toString(), PDFCreator.NORMAL_FONT));
		addEmptyLine(preface, 1);
		preface.add(new Phrase("Report generated by: ", PDFCreator.SMALL_BOLD));
		preface.add(new Phrase("Arun", PDFCreator.NORMAL_FONT));
		addEmptyLine(preface, 2);
		preface.add(new Phrase("This is basically a sample report.", PDFCreator.NORMAL_FONT));
		document.addSubject("PDF : " + title);
		preface.setAlignment(Element.ALIGN_CENTER);
		document.add(preface);
		document.newPage();
	}

	public static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	public static void addHeaderInTable(String[] headerArray, PdfPTable table){
		PdfPCell c1 = null;
		for(String header : headerArray) {
			c1 = new PdfPCell(new Phrase(header, PDFCreator.SMALL_BOLD));
			c1.setBackgroundColor(BaseColor.GREEN);
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);
		}
		table.setHeaderRows(1);
	}

	public static void addToTable(PdfPTable table, String data){        
		table.addCell(new Phrase(data, PDFCreator.NORMAL_FONT));
	}

	public static Paragraph getParagraph(){        
		Paragraph paragraph = new Paragraph();
		paragraph.setFont(PDFCreator.NORMAL_FONT);
		addEmptyLine(paragraph, 1);
		return paragraph;
	}*/


	//private static String FILE = "/Users/VijayPeddy/Downloads/SelfPaidGrocerySystem_PDFs/FirstPdf.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public String createPdf(String fileName, java.util.List<ItemSelected> itemsSelected) {
		Document document = null;
		//String fileName = "";
		try {
			document = new Document();


			/*fileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
			fileName = "Receipt_"+fileName+".pdf";*/

			PdfWriter.getInstance(document, new FileOutputStream(SelfpaidConstants.receiptPath+fileName));


			document.open();
			addMetaData(document);
			//addTitlePage(document);
			addContent(document, itemsSelected);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			document.close();
		}
		return fileName;
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("Receipt");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	/*private void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Title of the document", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("This document describes something which is very important ", smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).", redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}*/

	private void addContent(Document document, java.util.List<ItemSelected> itemsSelected) throws DocumentException {

		try {

			/*Anchor anchor = new Anchor("Purchase Receipt", catFont);
		anchor.setName("Purchased Date   " + new SimpleDateFormat("yyyy/MM/dd").format(new Date()));

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Font font = FontFactory.getFont(FontFactory.TIMES_ROMAN, 16, BaseColor.BLACK);

		Chunk chunk = new Chunk("Hello World", font);
		document.add(chunk);

		Paragraph subPara = new Paragraph("List of Purchased Items", subFont);
		Section subCatPart = catPart.addSection(subPara);
		//subCatPart.add(new Paragraph("Hello"));

		// add a list
		//createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 1);
		subCatPart.add(paragraph);*/

			Path path = Paths.get(ClassLoader.getSystemResource("receipt_logo.png").toURI());
			Image img = Image.getInstance(path.toAbsolutePath().toString());
			document.add(img);

			Anchor anchorTarget = new Anchor("Purchase Receipt for " + itemsSelected.get(0).getMEMBER_ID(), catFont);
			anchorTarget.setName("BackToTop");
			Paragraph paragraph1 = new Paragraph();

			paragraph1.setSpacingBefore(10);

			paragraph1.add(anchorTarget);
			document.add(paragraph1);

			//document.add(new Paragraph("Purchased Date   " + new SimpleDateFormat("yyyy/MM/dd").format(new Date())	, FontFactory.getFont(FontFactory.COURIER, 14, Font.BOLD, new CMYKColor(0, 255, 0, 0))));
			document.add(new Paragraph("Purchased Date   " + new SimpleDateFormat("yyyy/MM/dd").format(new Date())	 + " " + new SimpleDateFormat("hh:mm").format(new Date()), catFont));

			/*Paragraph title1 = new Paragraph("Purchased Items", catFont);
			Chapter chapter1 = new Chapter(title1, 1);
			Section section1 = chapter1.addSection(title1);*/

			Paragraph paragraph = new Paragraph();
			addEmptyLine(paragraph, 1);
			document.add(paragraph);

			//title1.add(title1);
			
			createTable(document, itemsSelected);
			
			addEmptyLine(paragraph, 1);
			addEmptyLine(paragraph, 1);
			double totalPrice = calculateTotalPriceForPdf(itemsSelected);
			paragraph1.setSpacingBefore(10);
			document.add(new Paragraph("                                                     Total Price: $" + totalPrice, catFont));

			
			
			//document.add(section1);

			/*PdfPTable t = new PdfPTable(3);

		 t.setSpacingBefore(25);

	      t.setSpacingAfter(25);

	      PdfPCell c1 = new PdfPCell(new Phrase("Header1"));  

	      t.addCell(c1);

	      PdfPCell c2 = new PdfPCell(new Phrase("Header2"));

	      t.addCell(c2);

	      PdfPCell c3 = new PdfPCell(new Phrase("Header3"));

	      t.addCell(c3);

	      t.addCell("1.1");

	      t.addCell("1.2");

	      t.addCell("1.3");
	      section1.add(t);*/


			/*// add a table
		createTable(subCatPart, itemsSelected);

		// now add all this to the document
		document.add(catPart);*/

			// Next section
			//anchor = new Anchor("Second Chapter", catFont);
			/*anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		document.add(catPart);*/
		} catch(Exception e) {
			e.printStackTrace();
		}

	}

	private void createTable(Document document, /*Section subCatPart, */java.util.List<ItemSelected> itemsSelected) throws BadElementException {
		try {
			PdfPTable table = new PdfPTable(4);

			// t.setBorderColor(BaseColor.GRAY);
			// t.setPadding(4);
			// t.setSpacing(4);
			// t.setBorderWidth(1);

			PdfPCell c1 = new PdfPCell(new Phrase("NAME"));
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);

			c1 = new PdfPCell(new Phrase("PRICE ($)"));
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);

			c1 = new PdfPCell(new Phrase("QUANTITY"));
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);

			c1 = new PdfPCell(new Phrase("WEIGHT (lb)"));
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);

			table.setHeaderRows(1);

			for(int i=0; i<itemsSelected.size(); i++) {
				table.addCell(itemsSelected.get(i).getNAME());
				//table.addCell(String.valueOf(DoubleRounder.round(itemsSelected.get(i).getPRICE(), 2)));
				table.addCell(String.valueOf(itemsSelected.get(i).getPRICE()));
				table.addCell(String.valueOf(itemsSelected.get(i).getQUANTITY()));
				table.addCell(String.valueOf(itemsSelected.get(i).getWEIGHT()));
				//table.addCell(String.valueOf(itemsSelected.get(i).getMEMBER_ID()));
			}
			
			/*double totalPrice = calculateTotalPriceForPdf(itemsSelected);
			table.addCell("");
			table.addCell("Total Price");
			table.addCell(String.valueOf(totalPrice));
			table.addCell("");*/

			//subCatPart.add(table);
			document.add(table);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private double calculateTotalPriceForPdf(java.util.List<ItemSelected> itemsSelected) {
		double totalPrice = 0.0;
		try{
			for(ItemSelected itemSelected: itemsSelected) {
				totalPrice = totalPrice + itemSelected.getPRICE();
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		logger.info("Total Price: $" + totalPrice);
		return DoubleRounder.round(totalPrice, 2);
	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		subCatPart.add(list);
	}

	
	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	/*public static void main(String[] args) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}*/
}

